import pygame
import random
import time

# Define the size of the grid
grid_size = 3

# Define the starting position of the red pixel
x_pos = random.randint(0, grid_size-1)
y_pos = random.randint(0, grid_size-1)

# Define the total simulation time in seconds
simulation_time = 30

# Define the size of each cell in the grid
cell_size = 100

# Define the colors for the red and black pixels
red = (255, 0, 0)
black = (0, 0, 0)

# Initialize Pygame
pygame.init()

# Create a window to display the grid
window_size = (grid_size * cell_size, grid_size * cell_size)
window = pygame.display.set_mode(window_size)

# Set the window title
pygame.display.set_caption("Red Pixel Simulation")

# Create a clock object to control the frame rate
clock = pygame.time.Clock()

# Loop for the duration of the simulation
start_time = time.time()
while time.time() - start_time < simulation_time:
    # Handle events such as quitting the simulation
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            quit()

    # Move the red pixel randomly to a neighboring cell
    possible_moves = []
    if x_pos > 0:
        possible_moves.append((-1, 0))
    if x_pos < grid_size-1:
        possible_moves.append((1, 0))
    if y_pos > 0:
        possible_moves.append((0, -1))
    if y_pos < grid_size-1:
        possible_moves.append((0, 1))
    move_x, move_y = random.choice(possible_moves)
    x_pos += move_x
    y_pos += move_y

    # Clear the screen with a black background
    window.fill(black)

    # Loop through each row of the grid
    for y in range(grid_size):
        # Loop through each column of the grid
        for x in range(grid_size):
            # Calculate the position of this cell in the window
            cell_rect = pygame.Rect(x * cell_size, y * cell_size, cell_size, cell_size)

            # Check if this is the location of the red pixel
            if x == x_pos and y == y_pos:
                # Draw the red pixel
                pygame.draw.rect(window, red, cell_rect)
            else:
                # Draw a black cell
                pygame.draw.rect(window, black, cell_rect)

    # Update the display
    pygame.display.update()

    # Wait for a short time before updating the position of the red pixel
    time.sleep(0.5)

    # Limit the frame rate to 10 frames per second
    clock.tick(10)

# Quit Pygame at the end of the simulation
pygame.quit()
